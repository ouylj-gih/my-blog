{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1639033006373},{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1639033006375},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1639033006375},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1639033006376},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1639033006376},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1639033006377},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1639033006398},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1639033006377},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1639036514803},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1639033006378},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1639033006379},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1639033006379},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1639033006380},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1639033006382},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1639033006382},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1639033006383},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1639033006383},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1639033006384},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1639033006384},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1639033006396},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1639033006396},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1639033006396},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1639033006397},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639033006397},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639033006397},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1639033006398},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1639033006399},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1639033006386},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1639033006386},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1639033006387},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1639033006387},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1639033006388},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1639033006388},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1639033006389},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1639033006389},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1639033006390},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1639033006390},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1639033006393},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1639033006394},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1639033006394},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1639033006395},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1639033006395},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1639033006395},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1639033006400},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1639033006405},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1639033006414},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1639033006414},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1639033006415},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1639033006415},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1639033006416},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1639033006416},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1639033006417},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1639033006420},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1639033006420},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1639033006421},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1639033006422},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1639033006391},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1639033006391},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1639033006392},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1639033006392},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1639033006393},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1639033006393},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1639033006400},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1639033006401},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1639033006401},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1639033006401},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1639033006402},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1639033006402},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1639033006403},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1639033006403},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1639033006403},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1639033006404},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1639033006405},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1639033006404},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1639033006406},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1639033006407},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1639033006411},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1639033006417},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1639033006418},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1639033006418},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1639033006419},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1639033006418},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1639033006419},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1639033006410},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1639033006408},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1639033006413},{"_id":"public/2021/12/09/hello-world/index.html","hash":"d90ca27095e558619f480be08ea37323bf9cfc52","modified":1639036757069},{"_id":"public/archives/index.html","hash":"0c0a3e43f32e03f5091bf6dffed34f2f27201dc9","modified":1639036757069},{"_id":"public/archives/2021/index.html","hash":"9cb4057962e9e4d9489a85f6040951a29467bd39","modified":1639036757069},{"_id":"public/archives/2021/12/index.html","hash":"0342ccd505a5a90bfb6623a9ae1d94e2bdca1142","modified":1639036757069},{"_id":"public/index.html","hash":"af5d2c0cead03d0dedf13eac78ce0afd2f9ad24f","modified":1639036757069},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1639033619924},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1639033619924},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1639033619924},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1639033619924},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1639033619924},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1639033619924},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1639033619924},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1639033619924},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1639033619924},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1639033619924},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1639033619924},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1639033619924},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1639033619924},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1639033619924},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1639033619924},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1639033619924},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1639033619924},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1639033619924},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1639033619924},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1639033619924},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1639033619924},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1639033619924},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1639033619924},{"_id":"source/_posts/nginx.md","hash":"0d869bf7d835536bf6df8bd7e52e3d3aeea068ff","modified":1639036750084},{"_id":"public/2021/12/09/nginx/index.html","hash":"a6a39aac27d8eace7bd9defd64d731e6ad085f9c","modified":1639036757069}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-12-09T06:57:17.654Z","updated":"2021-12-09T06:56:46.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwymarf40000sol13prqdzbl","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Nginx","date":"2021-12-09T07:29:03.000Z","_content":"\n## 正向代理和反向代理\n\n- 正向代理：即代理客户端, 服务端不知道实际发起请求的客户端。\n\n- 反向代理：即代理服务端, 客户端不知道实际提供服务的服务端。\n\n## 功能\n\n- 主要功能是反向代理\n- 可以实现集群、负载均以及热加载\n- 静态资源虚拟化\n\n## 命令\n\n启动：`./nginx`\n\n停止（强制结束所有连接）：`./nginx -s stop`\n\n退出（等待客户端连接关闭后再停止）：`./nginx -s quit`\n\n重新加载：`./nginx -s reload`\n\n`-?/-h`: 帮助\n\n`-v` : 显示版本并退出\n\n`-V` : 显示版本和配置选项然后退出\n\n`-t` : 测试配置并退出\n\n`-T` : 测试配置，转储并退出\n\n`-q` : 在配置测试期间抑制非错误消息\n\n`-s` 信号：向主进程发送信号：停止、退出、重新打开、重新加载\n\n`-p` 前缀：设置前缀路径（默认值：NONE）\n\n`-e` 文件名：设置错误日志文件（默认：logs/error.log）\n\n`-c` 文件名：设置配置文件（默认：conf/nginx.conf）\n\n`-g` 指令：从配置文件中设置全局指令 \n\n## 进程\n- master进程：主进程，只有一个，接受指令，读取配置，并分发给worker进程，可以不需要中断服务，热加载。\n\n    master进程读取配置，根据server配置监听端口，根据location配置映射路由。\n    \n- worker进程：工作进程，可以多个，连接并处理客户端请求、相应数据，和后端服务进行通讯。\n\n    master进程根据配置fork出多个worker进程，worker进程抢占客户端请求，并且worker进程是异步非阻塞的，可以同时处理多个请求，可设置最大并发数。\n\n## 配置文件\n\n```\n# 全局配置\n\n# worker进程的用户\n#user  nobody;\n\n# worker进程数（推荐为CPU数量-1）\nworker_processes  1;\n\n# 日志（级别多到少：debug/info/notice/warn/error/crit）\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n# 使用pid文件的路径\n#pid        logs/nginx.pid;\n\n# 事件配置\nevents {\n    # 使用何种I/O模型(默认epoll)\n    #use epoll;\n    \n    # worker进程的最大连接客户端数量\n    worker_connections  1024;\n}\n\n# http配置\nhttp {\n    # 文件名; 导入其他配置文件（大量http的types配置从另外文件导入）\n    include       mime.types;\n    \n    # 默认类型\n    default_type  application/octet-stream;\n\n    # 访问日志格式：log_format 格式名字 格式内容;\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    # 访问日志：access_log 路径 格式;\n    #access_log  logs/access.log  main;\n\n    # 是否提升文件传输性能\n    sendfile        on;\n    # 是否数据包累计再发送\n    #tcp_nopush     on;\n\n    # 客户端保持连接服务器的时间（默认0）\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    # 是否压缩传输\n    #gzip  on;\n    # 限制最小压缩（小于1就不压缩）\n    #gzip_min_length  1;\n    # 定义压缩级别（gzip需开启，越高越压缩）\n    #gzip_comp_level  3;\n    # 压缩文件类型\n    #gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png application/json;\n\n    # 配置上游服务器 upstream [名称] { } \n    #upstream name {\n    #   server [IP1/域名1];\n    #   server [IP2/域名2];\n    \n    # 上游长链接处理数量\n    #   keepalive  65;\n    \n    # upstream指令参数：\n    # weight=number权重\n    # max_conns=number最大连接数，默认值0（不启用）\n    # slow_start=time慢启动（仅商业版，需要配置权重，且两台以上的集群\n    # down停止访问\n    # backup备用机(当其他服务器停止才会使用)）\n    # max_fails=number，fail_timeout=time：time时间内达到最大失败次数，nginx会把服务器剔除，再过time时间再尝试重新使用\n    #}\n    \n    # 设置缓存保存目录\n    #proxy_cache_path [path] 共享;\n\n\n    # 虚拟主机配置\n    server {\n        # 监听端口号\n        listen       80;\n        \n        # 服务器名：server_name 域名/IP;\n        server_name  localhost;\n        \n        # 添加返回头字段\n        # 允许跨域请求的域\n        #add_header 'Access-Control-Allow-Origin' *;\n        # 允许带上cookie请求\n        #add_header 'Access-Control-Allow-Credentials' 'true';\n        # 允许请求的方法，如 GET/POST/PUT/DELETE\n        #add_header 'Access-Control-Allow-Methods' *;\n        # 允许请求的header\n        #add_header 'Access-Control-Allow-Headers' *;\n        \n        # 对源站点验证：valid_referers 验证规则;\n        #valid_referers *;\n        #if ($invalid_referer) {\n        #    return 404;\n        #}\n\n        # 字符集\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        # 路由规则配置：location 匹配规则\n        # = 表示精确匹配，优先级最高\n        # ^~ 表示uri以某个常规字符串开头，用于匹配url路径\n        # ~ 表示区分大小写的正则匹配\n        # ~* 表示不区分大小写的正则匹配\n        # !~ 表示区分大小写不匹配的正则\n        # !~ 表示区分大小写不匹配的正则\n        # / 表示通用匹配，任何请求都会匹配到\n        # @ 定义命名location区段，这些区段客户段不能访问，只可以由内部产生的请求来访问，如try_files或error_page等\n        location / {\n            # 根路径替换为设置值\n            root   html;\n            \n            # 匹配的路径替换为设置值\n            #alias /home/;\n            \n            # 首页\n            index  index.html index.htm;\n            \n            # 浏览器缓存时间，expries [epoch/时长/@时刻/max];（时长可以为负和epoch为nocache，@22h30m即每天22点半过期，max永不过期）\n            #expries 10s;\n        }\n\n        # 错误页面：error_page 错误码 页面路径;\n        #error_page  404              /404.html;\n        error_page   500 502 503 504  /50x.html;\n        \n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n}\n\n```\n\n## Nginx模块\n\n- Event modele：事件模块\n- Phase handler：处理客户端请求和相应\n- Output filter：过滤相应的内容\n- Upstream：反向代理模块\n- Load balancer：负载均衡器，包含负载均衡的算法\n- Extend module：用于继承第三方模块\n\n## 实际应用\n\n### 静态资源防盗链\n\nHTTP Referer是Header的一部分，当浏览器向Web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器借此可以获得一些信息用于处理，例如防止未经允许的网站盗链图片、文件等。因此HTTP Referer头信息是可以通过程序来伪装生成的，所以通过Referer信息防盗链并非100%可靠，但是，它能够限制大部分的盗链情况。\n\n```\n    [server/location] {\n        ...\n        \n        # 对源站点验证：valid_referers [none/block/主机名称];\n        valid_referers *;\n        if ($invalid_referer) {\n            return 404;\n        }\n    }\n```\n### 负载均衡\n\n所谓的四到七层负载均衡，就是在对后台的服务器进行负载均衡时，依据四层的信息或七层的信息来决定怎么样转发流量。 比如四层的负载均衡，就是通过发布三层的IP地址（VIP），然后加四层的端口号，来决定哪些流量需要做负载均衡，对需要处理的流量进行NAT处理，转发至后台服务器，并记录下这个TCP或者UDP的流量是由哪台服务器处理的，后续这个连接的所有流量都同样转发到同一台服务器处理。七层的负载均衡，就是在四层的基础上（没有四层是绝对不可能有七层的），再考虑应用层的特征，比如同一个Web服务器的负载均衡，除了根据VIP加80端口辨别是否需要处理的流量，还可根据七层的URL、浏览器类别、语言来决定是否要进行负载均衡。\n\n- 四层负载均衡：基于IP+端口的负载均衡，通过虚拟IP+端口接收请求，然后再分配到真实的服务器。\n- 七层负载均衡：通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器，七层就是基于URL等应用层信息的负载均衡。\n- DNS地域负载均衡：基于地理的负载均衡。\n\n### 提高上游吞吐量\n\n```\nupstream memcached_backend {\n    server 127.0.0.1:8080;\n\n    # 要保持的连接数（长连接）\n    keepalive 32;\n}\n\nserver {\n    ...\n\n    location /http/ {\n        proxy_pass http://http_backend;\n        # 长连接版本号（默认为1.0不是长连接）\n        proxy_http_version 1.1;\n        # 清楚Connection里的信息\n        proxy_set_header Connection \"\";\n        ...\n    }\n}\n```\n\n### 负载均衡策略\n\n- 轮询和权重\n\n- ip_hash 负载均衡\n\n    ip_hash是根据用户请求过来的ip，然后映射成hash值，然后分配到一个特定的服务器里面；使用ip_hash这种负载均衡以后，可以保证用户的每一次会话都只会发送到同一台特定的Tomcat里面，它的session不会跨到其他的tomcat里面去的；\n\n    原理：服务器index = hash(客户端IP) % 集群服务器数量\n\n    使用方法：直接添加ip_hash;，后续同一ip的访问将只会请求同一个服务器。\n\n    注意：一旦使用了ip_hash，当我们需要移除一台服务器的时候，不能直接删除这个配置项，而是需要在这台服务器配置后面加上关键字down，表示不可用；因为如果直接移除配置项，会导致hash算法发生更改，后续所有的请求都会发生混乱。需要配置一致性hash算法。\n\n    ```\n    upstream backend {\n        ip_hash;\n    \n        server backend1.example.com;\n        server backend2.example.com;\n        server backend3.example.com down;\n        server backend4.example.com;\n    }\n    ```\n\n- url_hash 负载均衡\n\n    和ip_hash类似，url_hash是根据用户请求过来的url，然后映射成hash值，然后分配到一个特定的服务器里面；\n    \n    使用方法：添加hash $request_uri，表明了是按照url规则进行hash策略\n    \n    原理：服务器index = hash(客户端请求url) % 集群服务器数量\n    ```\n    upstream backend {\n        # 使用Nginx内置变量;\n        hash $request_uri;\n    \n        server backend1.example.com;\n        server backend2.example.com;\n        server backend3.example.com down;\n        server backend4.example.com;\n    }\n    ```\n    \n- least_conn 负载均衡\n    \n    按服务器连接数，新的请求到最少连接数的服务器\n    \n    使用方法：和以上类似，直接添加least_conn;\n    \n### 上游服务器缓存\n\nproxy_cache_path和proxy_cache。proxy_cache_path配置缓存的存放地址和其他的一些常用配置，proxy_cache指令是为了启动缓存。\n- **/path/to/cache** 本地路径，用来设置Nginx缓存资源的存放地址\n- **levels** 默认所有缓存文件都放在同一个/path/to/cache下，但是会影响缓存的性能，因此通常会在/path/to/cache下面建立子目录用来分别存放不同的文件。假设levels=1:2，Nginx为将要缓存的资源生成的key为f4cd0fbc769e94925ec5540b6a4136d0，那么key的最后一位0，以及倒数第2-3位6d作为两级的子目录，也就是该资源最终会被缓存到/path/to/cache/0/6d目录中\n- **key_zone** 在共享内存中设置一块存储区域来存放缓存的key和metadata（类似使用次数），这样nginx可以快速判断一个request是否命中或者未命中缓存，1m可以存储8000个key，10m可以存储80000个key\n- **max_size** 最大cache空间，如果不指定，会使用掉所有\n- **disk space**，当达到配额后，会删除最少使用的cache文件\n- **inactive** 未被访问文件在缓存中保留时间，本配置中如果60分钟未被访问则不论状态是否为expired，缓存控制程序会删掉文件。inactive默认是10分钟。需要注意的是，inactive和expired配置项的含义是不同的，expired只是缓存过期，但不会被删除，inactive是删除指定时间内未被访问的缓存文件\n- **use_temp_path** 如果为off，则nginx会将缓存文件直接写入指定的cache文件中，而不是使用temp_path存储，official建议为off，避免文件在不同文件系统中不必要的拷贝\n- **proxy_cache** 启用proxy cache，并指定key_zone。另外，如果proxy_cache off表示关闭掉缓存。\n\n```\nproxy_cache_path /path/to/cache levels=1:2 keys_zone=mycache:10m max_size=10g inactive=60m use_temp_path=off;\nserver {\n　　# ...\n　　location / {\n　　    # 开启并使用缓存\n　　　　proxy_cache mycache;\n　　    # 针对200和304状态码的缓存设置过期时间\n　　    proxy_cache_valid 200 304 8h;\n　　    \n　　　　proxy_pass http://my_upstream;\n　　}\n}\n```\n\n### 使用配置SSL证书提供HTTPS访问协议\n\n1. 上传证书和密钥\n1. 安装Nginx SSL模块\n1. 修改配置文件\n    ```\n    http {\n        include       mime.types;\n        default_type  application/octet-stream;\n        sendfile        on;\n        keepalive_timeout  65;\n        \n        server {\n            # 监听443端口\n            listen 443;\n            \n            # 域名\n            server_name huiblog.top;\n            \n            # 开启ssl\n            ssl on;\n            \n            # ssl证书的pem文件路径\n            ssl_certificate  /root/card/huiblog.top.pem;\n            \n            # ssl证书的key文件路径\n            ssl_certificate_key /root/card/huiblog.top.key;\n            \n            # ssl会话cache?\n            ssl_session_cache shared:SSL:1m;\n            \n            # ssl会话超时时间?\n            ssl_session_timeout 5m;\n            \n            # 配置加密协议\n            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n            \n            # 配置加密套件\n            # 加密套件解读：\n            #    ECDHE-RSA-AES128-GCM-SHA256 为例\n            #    \n            #    ECDHE：秘钥交换算法\n            #    RSA：签名算法\n            #    AES128：对称加密算法\n            #    GCM-SHA256：签名算法\n            ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;\n            ssl_prefer_server_ciphers on;\n            \n            location / {\n                proxy_pass  http://公网地址:项目端口号;\n            }\n        }\n\n        server {\n            listen 80;\n            server_name huiblog.top;\n            \n            # 将请求转成https\n            rewrite ^(.*)$ https://$host$1 permanent;\n        }\n    }\n    ```\n\n## 问题解决\n\n### nginx.pid 打开失败及无效的解决办法\n\n    重新创建nginx.pid路径，重新设置nginx配置文件。\n    \n    `./nginx -c [filename]`","source":"_posts/nginx.md","raw":"---\ntitle: Nginx\ndate: 2021-12-09 15:29:03\ntags:\n---\n\n## 正向代理和反向代理\n\n- 正向代理：即代理客户端, 服务端不知道实际发起请求的客户端。\n\n- 反向代理：即代理服务端, 客户端不知道实际提供服务的服务端。\n\n## 功能\n\n- 主要功能是反向代理\n- 可以实现集群、负载均以及热加载\n- 静态资源虚拟化\n\n## 命令\n\n启动：`./nginx`\n\n停止（强制结束所有连接）：`./nginx -s stop`\n\n退出（等待客户端连接关闭后再停止）：`./nginx -s quit`\n\n重新加载：`./nginx -s reload`\n\n`-?/-h`: 帮助\n\n`-v` : 显示版本并退出\n\n`-V` : 显示版本和配置选项然后退出\n\n`-t` : 测试配置并退出\n\n`-T` : 测试配置，转储并退出\n\n`-q` : 在配置测试期间抑制非错误消息\n\n`-s` 信号：向主进程发送信号：停止、退出、重新打开、重新加载\n\n`-p` 前缀：设置前缀路径（默认值：NONE）\n\n`-e` 文件名：设置错误日志文件（默认：logs/error.log）\n\n`-c` 文件名：设置配置文件（默认：conf/nginx.conf）\n\n`-g` 指令：从配置文件中设置全局指令 \n\n## 进程\n- master进程：主进程，只有一个，接受指令，读取配置，并分发给worker进程，可以不需要中断服务，热加载。\n\n    master进程读取配置，根据server配置监听端口，根据location配置映射路由。\n    \n- worker进程：工作进程，可以多个，连接并处理客户端请求、相应数据，和后端服务进行通讯。\n\n    master进程根据配置fork出多个worker进程，worker进程抢占客户端请求，并且worker进程是异步非阻塞的，可以同时处理多个请求，可设置最大并发数。\n\n## 配置文件\n\n```\n# 全局配置\n\n# worker进程的用户\n#user  nobody;\n\n# worker进程数（推荐为CPU数量-1）\nworker_processes  1;\n\n# 日志（级别多到少：debug/info/notice/warn/error/crit）\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n# 使用pid文件的路径\n#pid        logs/nginx.pid;\n\n# 事件配置\nevents {\n    # 使用何种I/O模型(默认epoll)\n    #use epoll;\n    \n    # worker进程的最大连接客户端数量\n    worker_connections  1024;\n}\n\n# http配置\nhttp {\n    # 文件名; 导入其他配置文件（大量http的types配置从另外文件导入）\n    include       mime.types;\n    \n    # 默认类型\n    default_type  application/octet-stream;\n\n    # 访问日志格式：log_format 格式名字 格式内容;\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    # 访问日志：access_log 路径 格式;\n    #access_log  logs/access.log  main;\n\n    # 是否提升文件传输性能\n    sendfile        on;\n    # 是否数据包累计再发送\n    #tcp_nopush     on;\n\n    # 客户端保持连接服务器的时间（默认0）\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    # 是否压缩传输\n    #gzip  on;\n    # 限制最小压缩（小于1就不压缩）\n    #gzip_min_length  1;\n    # 定义压缩级别（gzip需开启，越高越压缩）\n    #gzip_comp_level  3;\n    # 压缩文件类型\n    #gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png application/json;\n\n    # 配置上游服务器 upstream [名称] { } \n    #upstream name {\n    #   server [IP1/域名1];\n    #   server [IP2/域名2];\n    \n    # 上游长链接处理数量\n    #   keepalive  65;\n    \n    # upstream指令参数：\n    # weight=number权重\n    # max_conns=number最大连接数，默认值0（不启用）\n    # slow_start=time慢启动（仅商业版，需要配置权重，且两台以上的集群\n    # down停止访问\n    # backup备用机(当其他服务器停止才会使用)）\n    # max_fails=number，fail_timeout=time：time时间内达到最大失败次数，nginx会把服务器剔除，再过time时间再尝试重新使用\n    #}\n    \n    # 设置缓存保存目录\n    #proxy_cache_path [path] 共享;\n\n\n    # 虚拟主机配置\n    server {\n        # 监听端口号\n        listen       80;\n        \n        # 服务器名：server_name 域名/IP;\n        server_name  localhost;\n        \n        # 添加返回头字段\n        # 允许跨域请求的域\n        #add_header 'Access-Control-Allow-Origin' *;\n        # 允许带上cookie请求\n        #add_header 'Access-Control-Allow-Credentials' 'true';\n        # 允许请求的方法，如 GET/POST/PUT/DELETE\n        #add_header 'Access-Control-Allow-Methods' *;\n        # 允许请求的header\n        #add_header 'Access-Control-Allow-Headers' *;\n        \n        # 对源站点验证：valid_referers 验证规则;\n        #valid_referers *;\n        #if ($invalid_referer) {\n        #    return 404;\n        #}\n\n        # 字符集\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        # 路由规则配置：location 匹配规则\n        # = 表示精确匹配，优先级最高\n        # ^~ 表示uri以某个常规字符串开头，用于匹配url路径\n        # ~ 表示区分大小写的正则匹配\n        # ~* 表示不区分大小写的正则匹配\n        # !~ 表示区分大小写不匹配的正则\n        # !~ 表示区分大小写不匹配的正则\n        # / 表示通用匹配，任何请求都会匹配到\n        # @ 定义命名location区段，这些区段客户段不能访问，只可以由内部产生的请求来访问，如try_files或error_page等\n        location / {\n            # 根路径替换为设置值\n            root   html;\n            \n            # 匹配的路径替换为设置值\n            #alias /home/;\n            \n            # 首页\n            index  index.html index.htm;\n            \n            # 浏览器缓存时间，expries [epoch/时长/@时刻/max];（时长可以为负和epoch为nocache，@22h30m即每天22点半过期，max永不过期）\n            #expries 10s;\n        }\n\n        # 错误页面：error_page 错误码 页面路径;\n        #error_page  404              /404.html;\n        error_page   500 502 503 504  /50x.html;\n        \n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n}\n\n```\n\n## Nginx模块\n\n- Event modele：事件模块\n- Phase handler：处理客户端请求和相应\n- Output filter：过滤相应的内容\n- Upstream：反向代理模块\n- Load balancer：负载均衡器，包含负载均衡的算法\n- Extend module：用于继承第三方模块\n\n## 实际应用\n\n### 静态资源防盗链\n\nHTTP Referer是Header的一部分，当浏览器向Web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器借此可以获得一些信息用于处理，例如防止未经允许的网站盗链图片、文件等。因此HTTP Referer头信息是可以通过程序来伪装生成的，所以通过Referer信息防盗链并非100%可靠，但是，它能够限制大部分的盗链情况。\n\n```\n    [server/location] {\n        ...\n        \n        # 对源站点验证：valid_referers [none/block/主机名称];\n        valid_referers *;\n        if ($invalid_referer) {\n            return 404;\n        }\n    }\n```\n### 负载均衡\n\n所谓的四到七层负载均衡，就是在对后台的服务器进行负载均衡时，依据四层的信息或七层的信息来决定怎么样转发流量。 比如四层的负载均衡，就是通过发布三层的IP地址（VIP），然后加四层的端口号，来决定哪些流量需要做负载均衡，对需要处理的流量进行NAT处理，转发至后台服务器，并记录下这个TCP或者UDP的流量是由哪台服务器处理的，后续这个连接的所有流量都同样转发到同一台服务器处理。七层的负载均衡，就是在四层的基础上（没有四层是绝对不可能有七层的），再考虑应用层的特征，比如同一个Web服务器的负载均衡，除了根据VIP加80端口辨别是否需要处理的流量，还可根据七层的URL、浏览器类别、语言来决定是否要进行负载均衡。\n\n- 四层负载均衡：基于IP+端口的负载均衡，通过虚拟IP+端口接收请求，然后再分配到真实的服务器。\n- 七层负载均衡：通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器，七层就是基于URL等应用层信息的负载均衡。\n- DNS地域负载均衡：基于地理的负载均衡。\n\n### 提高上游吞吐量\n\n```\nupstream memcached_backend {\n    server 127.0.0.1:8080;\n\n    # 要保持的连接数（长连接）\n    keepalive 32;\n}\n\nserver {\n    ...\n\n    location /http/ {\n        proxy_pass http://http_backend;\n        # 长连接版本号（默认为1.0不是长连接）\n        proxy_http_version 1.1;\n        # 清楚Connection里的信息\n        proxy_set_header Connection \"\";\n        ...\n    }\n}\n```\n\n### 负载均衡策略\n\n- 轮询和权重\n\n- ip_hash 负载均衡\n\n    ip_hash是根据用户请求过来的ip，然后映射成hash值，然后分配到一个特定的服务器里面；使用ip_hash这种负载均衡以后，可以保证用户的每一次会话都只会发送到同一台特定的Tomcat里面，它的session不会跨到其他的tomcat里面去的；\n\n    原理：服务器index = hash(客户端IP) % 集群服务器数量\n\n    使用方法：直接添加ip_hash;，后续同一ip的访问将只会请求同一个服务器。\n\n    注意：一旦使用了ip_hash，当我们需要移除一台服务器的时候，不能直接删除这个配置项，而是需要在这台服务器配置后面加上关键字down，表示不可用；因为如果直接移除配置项，会导致hash算法发生更改，后续所有的请求都会发生混乱。需要配置一致性hash算法。\n\n    ```\n    upstream backend {\n        ip_hash;\n    \n        server backend1.example.com;\n        server backend2.example.com;\n        server backend3.example.com down;\n        server backend4.example.com;\n    }\n    ```\n\n- url_hash 负载均衡\n\n    和ip_hash类似，url_hash是根据用户请求过来的url，然后映射成hash值，然后分配到一个特定的服务器里面；\n    \n    使用方法：添加hash $request_uri，表明了是按照url规则进行hash策略\n    \n    原理：服务器index = hash(客户端请求url) % 集群服务器数量\n    ```\n    upstream backend {\n        # 使用Nginx内置变量;\n        hash $request_uri;\n    \n        server backend1.example.com;\n        server backend2.example.com;\n        server backend3.example.com down;\n        server backend4.example.com;\n    }\n    ```\n    \n- least_conn 负载均衡\n    \n    按服务器连接数，新的请求到最少连接数的服务器\n    \n    使用方法：和以上类似，直接添加least_conn;\n    \n### 上游服务器缓存\n\nproxy_cache_path和proxy_cache。proxy_cache_path配置缓存的存放地址和其他的一些常用配置，proxy_cache指令是为了启动缓存。\n- **/path/to/cache** 本地路径，用来设置Nginx缓存资源的存放地址\n- **levels** 默认所有缓存文件都放在同一个/path/to/cache下，但是会影响缓存的性能，因此通常会在/path/to/cache下面建立子目录用来分别存放不同的文件。假设levels=1:2，Nginx为将要缓存的资源生成的key为f4cd0fbc769e94925ec5540b6a4136d0，那么key的最后一位0，以及倒数第2-3位6d作为两级的子目录，也就是该资源最终会被缓存到/path/to/cache/0/6d目录中\n- **key_zone** 在共享内存中设置一块存储区域来存放缓存的key和metadata（类似使用次数），这样nginx可以快速判断一个request是否命中或者未命中缓存，1m可以存储8000个key，10m可以存储80000个key\n- **max_size** 最大cache空间，如果不指定，会使用掉所有\n- **disk space**，当达到配额后，会删除最少使用的cache文件\n- **inactive** 未被访问文件在缓存中保留时间，本配置中如果60分钟未被访问则不论状态是否为expired，缓存控制程序会删掉文件。inactive默认是10分钟。需要注意的是，inactive和expired配置项的含义是不同的，expired只是缓存过期，但不会被删除，inactive是删除指定时间内未被访问的缓存文件\n- **use_temp_path** 如果为off，则nginx会将缓存文件直接写入指定的cache文件中，而不是使用temp_path存储，official建议为off，避免文件在不同文件系统中不必要的拷贝\n- **proxy_cache** 启用proxy cache，并指定key_zone。另外，如果proxy_cache off表示关闭掉缓存。\n\n```\nproxy_cache_path /path/to/cache levels=1:2 keys_zone=mycache:10m max_size=10g inactive=60m use_temp_path=off;\nserver {\n　　# ...\n　　location / {\n　　    # 开启并使用缓存\n　　　　proxy_cache mycache;\n　　    # 针对200和304状态码的缓存设置过期时间\n　　    proxy_cache_valid 200 304 8h;\n　　    \n　　　　proxy_pass http://my_upstream;\n　　}\n}\n```\n\n### 使用配置SSL证书提供HTTPS访问协议\n\n1. 上传证书和密钥\n1. 安装Nginx SSL模块\n1. 修改配置文件\n    ```\n    http {\n        include       mime.types;\n        default_type  application/octet-stream;\n        sendfile        on;\n        keepalive_timeout  65;\n        \n        server {\n            # 监听443端口\n            listen 443;\n            \n            # 域名\n            server_name huiblog.top;\n            \n            # 开启ssl\n            ssl on;\n            \n            # ssl证书的pem文件路径\n            ssl_certificate  /root/card/huiblog.top.pem;\n            \n            # ssl证书的key文件路径\n            ssl_certificate_key /root/card/huiblog.top.key;\n            \n            # ssl会话cache?\n            ssl_session_cache shared:SSL:1m;\n            \n            # ssl会话超时时间?\n            ssl_session_timeout 5m;\n            \n            # 配置加密协议\n            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n            \n            # 配置加密套件\n            # 加密套件解读：\n            #    ECDHE-RSA-AES128-GCM-SHA256 为例\n            #    \n            #    ECDHE：秘钥交换算法\n            #    RSA：签名算法\n            #    AES128：对称加密算法\n            #    GCM-SHA256：签名算法\n            ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;\n            ssl_prefer_server_ciphers on;\n            \n            location / {\n                proxy_pass  http://公网地址:项目端口号;\n            }\n        }\n\n        server {\n            listen 80;\n            server_name huiblog.top;\n            \n            # 将请求转成https\n            rewrite ^(.*)$ https://$host$1 permanent;\n        }\n    }\n    ```\n\n## 问题解决\n\n### nginx.pid 打开失败及无效的解决办法\n\n    重新创建nginx.pid路径，重新设置nginx配置文件。\n    \n    `./nginx -c [filename]`","slug":"nginx","published":1,"updated":"2021-12-09T07:59:10.084Z","_id":"ckwyn5qc20000zkl1eyrc0ss4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"正向代理和反向代理\"><a href=\"#正向代理和反向代理\" class=\"headerlink\" title=\"正向代理和反向代理\"></a>正向代理和反向代理</h2><ul>\n<li><p>正向代理：即代理客户端, 服务端不知道实际发起请求的客户端。</p>\n</li>\n<li><p>反向代理：即代理服务端, 客户端不知道实际提供服务的服务端。</p>\n</li>\n</ul>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li>主要功能是反向代理</li>\n<li>可以实现集群、负载均以及热加载</li>\n<li>静态资源虚拟化</li>\n</ul>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p>启动：<code>./nginx</code></p>\n<p>停止（强制结束所有连接）：<code>./nginx -s stop</code></p>\n<p>退出（等待客户端连接关闭后再停止）：<code>./nginx -s quit</code></p>\n<p>重新加载：<code>./nginx -s reload</code></p>\n<p><code>-?/-h</code>: 帮助</p>\n<p><code>-v</code> : 显示版本并退出</p>\n<p><code>-V</code> : 显示版本和配置选项然后退出</p>\n<p><code>-t</code> : 测试配置并退出</p>\n<p><code>-T</code> : 测试配置，转储并退出</p>\n<p><code>-q</code> : 在配置测试期间抑制非错误消息</p>\n<p><code>-s</code> 信号：向主进程发送信号：停止、退出、重新打开、重新加载</p>\n<p><code>-p</code> 前缀：设置前缀路径（默认值：NONE）</p>\n<p><code>-e</code> 文件名：设置错误日志文件（默认：logs/error.log）</p>\n<p><code>-c</code> 文件名：设置配置文件（默认：conf/nginx.conf）</p>\n<p><code>-g</code> 指令：从配置文件中设置全局指令 </p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><ul>\n<li><p>master进程：主进程，只有一个，接受指令，读取配置，并分发给worker进程，可以不需要中断服务，热加载。</p>\n<p>  master进程读取配置，根据server配置监听端口，根据location配置映射路由。</p>\n</li>\n<li><p>worker进程：工作进程，可以多个，连接并处理客户端请求、相应数据，和后端服务进行通讯。</p>\n<p>  master进程根据配置fork出多个worker进程，worker进程抢占客户端请求，并且worker进程是异步非阻塞的，可以同时处理多个请求，可设置最大并发数。</p>\n</li>\n</ul>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置</span><br><span class=\"line\"></span><br><span class=\"line\"># worker进程的用户</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\"># worker进程数（推荐为CPU数量-1）</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\"># 日志（级别多到少：debug/info/notice/warn/error/crit）</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用pid文件的路径</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># 事件配置</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    # 使用何种I/O模型(默认epoll)</span><br><span class=\"line\">    #use epoll;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # worker进程的最大连接客户端数量</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># http配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    # 文件名; 导入其他配置文件（大量http的types配置从另外文件导入）</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 默认类型</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 访问日志格式：log_format 格式名字 格式内容;</span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\">    # 访问日志：access_log 路径 格式;</span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 是否提升文件传输性能</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    # 是否数据包累计再发送</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 客户端保持连接服务器的时间（默认0）</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 是否压缩传输</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    # 限制最小压缩（小于1就不压缩）</span><br><span class=\"line\">    #gzip_min_length  1;</span><br><span class=\"line\">    # 定义压缩级别（gzip需开启，越高越压缩）</span><br><span class=\"line\">    #gzip_comp_level  3;</span><br><span class=\"line\">    # 压缩文件类型</span><br><span class=\"line\">    #gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png application/json;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 配置上游服务器 upstream [名称] &#123; &#125; </span><br><span class=\"line\">    #upstream name &#123;</span><br><span class=\"line\">    #   server [IP1/域名1];</span><br><span class=\"line\">    #   server [IP2/域名2];</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 上游长链接处理数量</span><br><span class=\"line\">    #   keepalive  65;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # upstream指令参数：</span><br><span class=\"line\">    # weight=number权重</span><br><span class=\"line\">    # max_conns=number最大连接数，默认值0（不启用）</span><br><span class=\"line\">    # slow_start=time慢启动（仅商业版，需要配置权重，且两台以上的集群</span><br><span class=\"line\">    # down停止访问</span><br><span class=\"line\">    # backup备用机(当其他服务器停止才会使用)）</span><br><span class=\"line\">    # max_fails=number，fail_timeout=time：time时间内达到最大失败次数，nginx会把服务器剔除，再过time时间再尝试重新使用</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 设置缓存保存目录</span><br><span class=\"line\">    #proxy_cache_path [path] 共享;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        # 监听端口号</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 服务器名：server_name 域名/IP;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 添加返回头字段</span><br><span class=\"line\">        # 允许跨域请求的域</span><br><span class=\"line\">        #add_header &#x27;Access-Control-Allow-Origin&#x27; *;</span><br><span class=\"line\">        # 允许带上cookie请求</span><br><span class=\"line\">        #add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class=\"line\">        # 允许请求的方法，如 GET/POST/PUT/DELETE</span><br><span class=\"line\">        #add_header &#x27;Access-Control-Allow-Methods&#x27; *;</span><br><span class=\"line\">        # 允许请求的header</span><br><span class=\"line\">        #add_header &#x27;Access-Control-Allow-Headers&#x27; *;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 对源站点验证：valid_referers 验证规则;</span><br><span class=\"line\">        #valid_referers *;</span><br><span class=\"line\">        #if ($invalid_referer) &#123;</span><br><span class=\"line\">        #    return 404;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 字符集</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 路由规则配置：location 匹配规则</span><br><span class=\"line\">        # = 表示精确匹配，优先级最高</span><br><span class=\"line\">        # ^~ 表示uri以某个常规字符串开头，用于匹配url路径</span><br><span class=\"line\">        # ~ 表示区分大小写的正则匹配</span><br><span class=\"line\">        # ~* 表示不区分大小写的正则匹配</span><br><span class=\"line\">        # !~ 表示区分大小写不匹配的正则</span><br><span class=\"line\">        # !~ 表示区分大小写不匹配的正则</span><br><span class=\"line\">        # / 表示通用匹配，任何请求都会匹配到</span><br><span class=\"line\">        # @ 定义命名location区段，这些区段客户段不能访问，只可以由内部产生的请求来访问，如try_files或error_page等</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            # 根路径替换为设置值</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            </span><br><span class=\"line\">            # 匹配的路径替换为设置值</span><br><span class=\"line\">            #alias /home/;</span><br><span class=\"line\">            </span><br><span class=\"line\">            # 首页</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">            </span><br><span class=\"line\">            # 浏览器缓存时间，expries [epoch/时长/@时刻/max];（时长可以为负和epoch为nocache，@22h30m即每天22点半过期，max永不过期）</span><br><span class=\"line\">            #expries 10s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 错误页面：error_page 错误码 页面路径;</span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        </span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx模块\"><a href=\"#Nginx模块\" class=\"headerlink\" title=\"Nginx模块\"></a>Nginx模块</h2><ul>\n<li>Event modele：事件模块</li>\n<li>Phase handler：处理客户端请求和相应</li>\n<li>Output filter：过滤相应的内容</li>\n<li>Upstream：反向代理模块</li>\n<li>Load balancer：负载均衡器，包含负载均衡的算法</li>\n<li>Extend module：用于继承第三方模块</li>\n</ul>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><h3 id=\"静态资源防盗链\"><a href=\"#静态资源防盗链\" class=\"headerlink\" title=\"静态资源防盗链\"></a>静态资源防盗链</h3><p>HTTP Referer是Header的一部分，当浏览器向Web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器借此可以获得一些信息用于处理，例如防止未经允许的网站盗链图片、文件等。因此HTTP Referer头信息是可以通过程序来伪装生成的，所以通过Referer信息防盗链并非100%可靠，但是，它能够限制大部分的盗链情况。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[server/location] &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 对源站点验证：valid_referers [none/block/主机名称];</span><br><span class=\"line\">    valid_referers *;</span><br><span class=\"line\">    if ($invalid_referer) &#123;</span><br><span class=\"line\">        return 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>所谓的四到七层负载均衡，就是在对后台的服务器进行负载均衡时，依据四层的信息或七层的信息来决定怎么样转发流量。 比如四层的负载均衡，就是通过发布三层的IP地址（VIP），然后加四层的端口号，来决定哪些流量需要做负载均衡，对需要处理的流量进行NAT处理，转发至后台服务器，并记录下这个TCP或者UDP的流量是由哪台服务器处理的，后续这个连接的所有流量都同样转发到同一台服务器处理。七层的负载均衡，就是在四层的基础上（没有四层是绝对不可能有七层的），再考虑应用层的特征，比如同一个Web服务器的负载均衡，除了根据VIP加80端口辨别是否需要处理的流量，还可根据七层的URL、浏览器类别、语言来决定是否要进行负载均衡。</p>\n<ul>\n<li>四层负载均衡：基于IP+端口的负载均衡，通过虚拟IP+端口接收请求，然后再分配到真实的服务器。</li>\n<li>七层负载均衡：通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器，七层就是基于URL等应用层信息的负载均衡。</li>\n<li>DNS地域负载均衡：基于地理的负载均衡。</li>\n</ul>\n<h3 id=\"提高上游吞吐量\"><a href=\"#提高上游吞吐量\" class=\"headerlink\" title=\"提高上游吞吐量\"></a>提高上游吞吐量</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream memcached_backend &#123;</span><br><span class=\"line\">    server 127.0.0.1:8080;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 要保持的连接数（长连接）</span><br><span class=\"line\">    keepalive 32;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    location /http/ &#123;</span><br><span class=\"line\">        proxy_pass http://http_backend;</span><br><span class=\"line\">        # 长连接版本号（默认为1.0不是长连接）</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        # 清楚Connection里的信息</span><br><span class=\"line\">        proxy_set_header Connection &quot;&quot;;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><ul>\n<li><p>轮询和权重</p>\n</li>\n<li><p>ip_hash 负载均衡</p>\n<p>  ip_hash是根据用户请求过来的ip，然后映射成hash值，然后分配到一个特定的服务器里面；使用ip_hash这种负载均衡以后，可以保证用户的每一次会话都只会发送到同一台特定的Tomcat里面，它的session不会跨到其他的tomcat里面去的；</p>\n<p>  原理：服务器index = hash(客户端IP) % 集群服务器数量</p>\n<p>  使用方法：直接添加ip_hash;，后续同一ip的访问将只会请求同一个服务器。</p>\n<p>  注意：一旦使用了ip_hash，当我们需要移除一台服务器的时候，不能直接删除这个配置项，而是需要在这台服务器配置后面加上关键字down，表示不可用；因为如果直接移除配置项，会导致hash算法发生更改，后续所有的请求都会发生混乱。需要配置一致性hash算法。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\"></span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com down;</span><br><span class=\"line\">    server backend4.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>url_hash 负载均衡</p>\n<p>  和ip_hash类似，url_hash是根据用户请求过来的url，然后映射成hash值，然后分配到一个特定的服务器里面；</p>\n<p>  使用方法：添加hash $request_uri，表明了是按照url规则进行hash策略</p>\n<p>  原理：服务器index = hash(客户端请求url) % 集群服务器数量</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    # 使用Nginx内置变量;</span><br><span class=\"line\">    hash $request_uri;</span><br><span class=\"line\"></span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com down;</span><br><span class=\"line\">    server backend4.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>least_conn 负载均衡</p>\n<p>  按服务器连接数，新的请求到最少连接数的服务器</p>\n<p>  使用方法：和以上类似，直接添加least_conn;</p>\n</li>\n</ul>\n<h3 id=\"上游服务器缓存\"><a href=\"#上游服务器缓存\" class=\"headerlink\" title=\"上游服务器缓存\"></a>上游服务器缓存</h3><p>proxy_cache_path和proxy_cache。proxy_cache_path配置缓存的存放地址和其他的一些常用配置，proxy_cache指令是为了启动缓存。</p>\n<ul>\n<li><strong>/path/to/cache</strong> 本地路径，用来设置Nginx缓存资源的存放地址</li>\n<li><strong>levels</strong> 默认所有缓存文件都放在同一个/path/to/cache下，但是会影响缓存的性能，因此通常会在/path/to/cache下面建立子目录用来分别存放不同的文件。假设levels=1:2，Nginx为将要缓存的资源生成的key为f4cd0fbc769e94925ec5540b6a4136d0，那么key的最后一位0，以及倒数第2-3位6d作为两级的子目录，也就是该资源最终会被缓存到/path/to/cache/0/6d目录中</li>\n<li><strong>key_zone</strong> 在共享内存中设置一块存储区域来存放缓存的key和metadata（类似使用次数），这样nginx可以快速判断一个request是否命中或者未命中缓存，1m可以存储8000个key，10m可以存储80000个key</li>\n<li><strong>max_size</strong> 最大cache空间，如果不指定，会使用掉所有</li>\n<li><strong>disk space</strong>，当达到配额后，会删除最少使用的cache文件</li>\n<li><strong>inactive</strong> 未被访问文件在缓存中保留时间，本配置中如果60分钟未被访问则不论状态是否为expired，缓存控制程序会删掉文件。inactive默认是10分钟。需要注意的是，inactive和expired配置项的含义是不同的，expired只是缓存过期，但不会被删除，inactive是删除指定时间内未被访问的缓存文件</li>\n<li><strong>use_temp_path</strong> 如果为off，则nginx会将缓存文件直接写入指定的cache文件中，而不是使用temp_path存储，official建议为off，避免文件在不同文件系统中不必要的拷贝</li>\n<li><strong>proxy_cache</strong> 启用proxy cache，并指定key_zone。另外，如果proxy_cache off表示关闭掉缓存。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_cache_path /path/to/cache levels=1:2 keys_zone=mycache:10m max_size=10g inactive=60m use_temp_path=off;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">　　# ...</span><br><span class=\"line\">　　location / &#123;</span><br><span class=\"line\">　　    # 开启并使用缓存</span><br><span class=\"line\">　　　　proxy_cache mycache;</span><br><span class=\"line\">　　    # 针对200和304状态码的缓存设置过期时间</span><br><span class=\"line\">　　    proxy_cache_valid 200 304 8h;</span><br><span class=\"line\">　　    </span><br><span class=\"line\">　　　　proxy_pass http://my_upstream;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用配置SSL证书提供HTTPS访问协议\"><a href=\"#使用配置SSL证书提供HTTPS访问协议\" class=\"headerlink\" title=\"使用配置SSL证书提供HTTPS访问协议\"></a>使用配置SSL证书提供HTTPS访问协议</h3><ol>\n<li>上传证书和密钥</li>\n<li>安装Nginx SSL模块</li>\n<li>修改配置文件 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    </span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        # 监听443端口</span><br><span class=\"line\">        listen 443;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 域名</span><br><span class=\"line\">        server_name huiblog.top;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 开启ssl</span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # ssl证书的pem文件路径</span><br><span class=\"line\">        ssl_certificate  /root/card/huiblog.top.pem;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # ssl证书的key文件路径</span><br><span class=\"line\">        ssl_certificate_key /root/card/huiblog.top.key;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # ssl会话cache?</span><br><span class=\"line\">        ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # ssl会话超时时间?</span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 配置加密协议</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 配置加密套件</span><br><span class=\"line\">        # 加密套件解读：</span><br><span class=\"line\">        #    ECDHE-RSA-AES128-GCM-SHA256 为例</span><br><span class=\"line\">        #    </span><br><span class=\"line\">        #    ECDHE：秘钥交换算法</span><br><span class=\"line\">        #    RSA：签名算法</span><br><span class=\"line\">        #    AES128：对称加密算法</span><br><span class=\"line\">        #    GCM-SHA256：签名算法</span><br><span class=\"line\">        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        </span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass  http://公网地址:项目端口号;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name huiblog.top;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 将请求转成https</span><br><span class=\"line\">        rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"nginx-pid-打开失败及无效的解决办法\"><a href=\"#nginx-pid-打开失败及无效的解决办法\" class=\"headerlink\" title=\"nginx.pid 打开失败及无效的解决办法\"></a>nginx.pid 打开失败及无效的解决办法</h3><pre><code>重新创建nginx.pid路径，重新设置nginx配置文件。\n\n`./nginx -c [filename]`\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正向代理和反向代理\"><a href=\"#正向代理和反向代理\" class=\"headerlink\" title=\"正向代理和反向代理\"></a>正向代理和反向代理</h2><ul>\n<li><p>正向代理：即代理客户端, 服务端不知道实际发起请求的客户端。</p>\n</li>\n<li><p>反向代理：即代理服务端, 客户端不知道实际提供服务的服务端。</p>\n</li>\n</ul>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li>主要功能是反向代理</li>\n<li>可以实现集群、负载均以及热加载</li>\n<li>静态资源虚拟化</li>\n</ul>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p>启动：<code>./nginx</code></p>\n<p>停止（强制结束所有连接）：<code>./nginx -s stop</code></p>\n<p>退出（等待客户端连接关闭后再停止）：<code>./nginx -s quit</code></p>\n<p>重新加载：<code>./nginx -s reload</code></p>\n<p><code>-?/-h</code>: 帮助</p>\n<p><code>-v</code> : 显示版本并退出</p>\n<p><code>-V</code> : 显示版本和配置选项然后退出</p>\n<p><code>-t</code> : 测试配置并退出</p>\n<p><code>-T</code> : 测试配置，转储并退出</p>\n<p><code>-q</code> : 在配置测试期间抑制非错误消息</p>\n<p><code>-s</code> 信号：向主进程发送信号：停止、退出、重新打开、重新加载</p>\n<p><code>-p</code> 前缀：设置前缀路径（默认值：NONE）</p>\n<p><code>-e</code> 文件名：设置错误日志文件（默认：logs/error.log）</p>\n<p><code>-c</code> 文件名：设置配置文件（默认：conf/nginx.conf）</p>\n<p><code>-g</code> 指令：从配置文件中设置全局指令 </p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><ul>\n<li><p>master进程：主进程，只有一个，接受指令，读取配置，并分发给worker进程，可以不需要中断服务，热加载。</p>\n<p>  master进程读取配置，根据server配置监听端口，根据location配置映射路由。</p>\n</li>\n<li><p>worker进程：工作进程，可以多个，连接并处理客户端请求、相应数据，和后端服务进行通讯。</p>\n<p>  master进程根据配置fork出多个worker进程，worker进程抢占客户端请求，并且worker进程是异步非阻塞的，可以同时处理多个请求，可设置最大并发数。</p>\n</li>\n</ul>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 全局配置</span><br><span class=\"line\"></span><br><span class=\"line\"># worker进程的用户</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\"># worker进程数（推荐为CPU数量-1）</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\"># 日志（级别多到少：debug/info/notice/warn/error/crit）</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用pid文件的路径</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># 事件配置</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    # 使用何种I/O模型(默认epoll)</span><br><span class=\"line\">    #use epoll;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # worker进程的最大连接客户端数量</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># http配置</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    # 文件名; 导入其他配置文件（大量http的types配置从另外文件导入）</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 默认类型</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 访问日志格式：log_format 格式名字 格式内容;</span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\">    # 访问日志：access_log 路径 格式;</span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 是否提升文件传输性能</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    # 是否数据包累计再发送</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 客户端保持连接服务器的时间（默认0）</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 是否压缩传输</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    # 限制最小压缩（小于1就不压缩）</span><br><span class=\"line\">    #gzip_min_length  1;</span><br><span class=\"line\">    # 定义压缩级别（gzip需开启，越高越压缩）</span><br><span class=\"line\">    #gzip_comp_level  3;</span><br><span class=\"line\">    # 压缩文件类型</span><br><span class=\"line\">    #gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png application/json;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 配置上游服务器 upstream [名称] &#123; &#125; </span><br><span class=\"line\">    #upstream name &#123;</span><br><span class=\"line\">    #   server [IP1/域名1];</span><br><span class=\"line\">    #   server [IP2/域名2];</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 上游长链接处理数量</span><br><span class=\"line\">    #   keepalive  65;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # upstream指令参数：</span><br><span class=\"line\">    # weight=number权重</span><br><span class=\"line\">    # max_conns=number最大连接数，默认值0（不启用）</span><br><span class=\"line\">    # slow_start=time慢启动（仅商业版，需要配置权重，且两台以上的集群</span><br><span class=\"line\">    # down停止访问</span><br><span class=\"line\">    # backup备用机(当其他服务器停止才会使用)）</span><br><span class=\"line\">    # max_fails=number，fail_timeout=time：time时间内达到最大失败次数，nginx会把服务器剔除，再过time时间再尝试重新使用</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 设置缓存保存目录</span><br><span class=\"line\">    #proxy_cache_path [path] 共享;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        # 监听端口号</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 服务器名：server_name 域名/IP;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 添加返回头字段</span><br><span class=\"line\">        # 允许跨域请求的域</span><br><span class=\"line\">        #add_header &#x27;Access-Control-Allow-Origin&#x27; *;</span><br><span class=\"line\">        # 允许带上cookie请求</span><br><span class=\"line\">        #add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class=\"line\">        # 允许请求的方法，如 GET/POST/PUT/DELETE</span><br><span class=\"line\">        #add_header &#x27;Access-Control-Allow-Methods&#x27; *;</span><br><span class=\"line\">        # 允许请求的header</span><br><span class=\"line\">        #add_header &#x27;Access-Control-Allow-Headers&#x27; *;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 对源站点验证：valid_referers 验证规则;</span><br><span class=\"line\">        #valid_referers *;</span><br><span class=\"line\">        #if ($invalid_referer) &#123;</span><br><span class=\"line\">        #    return 404;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 字符集</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 路由规则配置：location 匹配规则</span><br><span class=\"line\">        # = 表示精确匹配，优先级最高</span><br><span class=\"line\">        # ^~ 表示uri以某个常规字符串开头，用于匹配url路径</span><br><span class=\"line\">        # ~ 表示区分大小写的正则匹配</span><br><span class=\"line\">        # ~* 表示不区分大小写的正则匹配</span><br><span class=\"line\">        # !~ 表示区分大小写不匹配的正则</span><br><span class=\"line\">        # !~ 表示区分大小写不匹配的正则</span><br><span class=\"line\">        # / 表示通用匹配，任何请求都会匹配到</span><br><span class=\"line\">        # @ 定义命名location区段，这些区段客户段不能访问，只可以由内部产生的请求来访问，如try_files或error_page等</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            # 根路径替换为设置值</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            </span><br><span class=\"line\">            # 匹配的路径替换为设置值</span><br><span class=\"line\">            #alias /home/;</span><br><span class=\"line\">            </span><br><span class=\"line\">            # 首页</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">            </span><br><span class=\"line\">            # 浏览器缓存时间，expries [epoch/时长/@时刻/max];（时长可以为负和epoch为nocache，@22h30m即每天22点半过期，max永不过期）</span><br><span class=\"line\">            #expries 10s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 错误页面：error_page 错误码 页面路径;</span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        </span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx模块\"><a href=\"#Nginx模块\" class=\"headerlink\" title=\"Nginx模块\"></a>Nginx模块</h2><ul>\n<li>Event modele：事件模块</li>\n<li>Phase handler：处理客户端请求和相应</li>\n<li>Output filter：过滤相应的内容</li>\n<li>Upstream：反向代理模块</li>\n<li>Load balancer：负载均衡器，包含负载均衡的算法</li>\n<li>Extend module：用于继承第三方模块</li>\n</ul>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><h3 id=\"静态资源防盗链\"><a href=\"#静态资源防盗链\" class=\"headerlink\" title=\"静态资源防盗链\"></a>静态资源防盗链</h3><p>HTTP Referer是Header的一部分，当浏览器向Web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器借此可以获得一些信息用于处理，例如防止未经允许的网站盗链图片、文件等。因此HTTP Referer头信息是可以通过程序来伪装生成的，所以通过Referer信息防盗链并非100%可靠，但是，它能够限制大部分的盗链情况。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[server/location] &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 对源站点验证：valid_referers [none/block/主机名称];</span><br><span class=\"line\">    valid_referers *;</span><br><span class=\"line\">    if ($invalid_referer) &#123;</span><br><span class=\"line\">        return 404;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>所谓的四到七层负载均衡，就是在对后台的服务器进行负载均衡时，依据四层的信息或七层的信息来决定怎么样转发流量。 比如四层的负载均衡，就是通过发布三层的IP地址（VIP），然后加四层的端口号，来决定哪些流量需要做负载均衡，对需要处理的流量进行NAT处理，转发至后台服务器，并记录下这个TCP或者UDP的流量是由哪台服务器处理的，后续这个连接的所有流量都同样转发到同一台服务器处理。七层的负载均衡，就是在四层的基础上（没有四层是绝对不可能有七层的），再考虑应用层的特征，比如同一个Web服务器的负载均衡，除了根据VIP加80端口辨别是否需要处理的流量，还可根据七层的URL、浏览器类别、语言来决定是否要进行负载均衡。</p>\n<ul>\n<li>四层负载均衡：基于IP+端口的负载均衡，通过虚拟IP+端口接收请求，然后再分配到真实的服务器。</li>\n<li>七层负载均衡：通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器，七层就是基于URL等应用层信息的负载均衡。</li>\n<li>DNS地域负载均衡：基于地理的负载均衡。</li>\n</ul>\n<h3 id=\"提高上游吞吐量\"><a href=\"#提高上游吞吐量\" class=\"headerlink\" title=\"提高上游吞吐量\"></a>提高上游吞吐量</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream memcached_backend &#123;</span><br><span class=\"line\">    server 127.0.0.1:8080;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 要保持的连接数（长连接）</span><br><span class=\"line\">    keepalive 32;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    location /http/ &#123;</span><br><span class=\"line\">        proxy_pass http://http_backend;</span><br><span class=\"line\">        # 长连接版本号（默认为1.0不是长连接）</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        # 清楚Connection里的信息</span><br><span class=\"line\">        proxy_set_header Connection &quot;&quot;;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><ul>\n<li><p>轮询和权重</p>\n</li>\n<li><p>ip_hash 负载均衡</p>\n<p>  ip_hash是根据用户请求过来的ip，然后映射成hash值，然后分配到一个特定的服务器里面；使用ip_hash这种负载均衡以后，可以保证用户的每一次会话都只会发送到同一台特定的Tomcat里面，它的session不会跨到其他的tomcat里面去的；</p>\n<p>  原理：服务器index = hash(客户端IP) % 集群服务器数量</p>\n<p>  使用方法：直接添加ip_hash;，后续同一ip的访问将只会请求同一个服务器。</p>\n<p>  注意：一旦使用了ip_hash，当我们需要移除一台服务器的时候，不能直接删除这个配置项，而是需要在这台服务器配置后面加上关键字down，表示不可用；因为如果直接移除配置项，会导致hash算法发生更改，后续所有的请求都会发生混乱。需要配置一致性hash算法。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\"></span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com down;</span><br><span class=\"line\">    server backend4.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>url_hash 负载均衡</p>\n<p>  和ip_hash类似，url_hash是根据用户请求过来的url，然后映射成hash值，然后分配到一个特定的服务器里面；</p>\n<p>  使用方法：添加hash $request_uri，表明了是按照url规则进行hash策略</p>\n<p>  原理：服务器index = hash(客户端请求url) % 集群服务器数量</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    # 使用Nginx内置变量;</span><br><span class=\"line\">    hash $request_uri;</span><br><span class=\"line\"></span><br><span class=\"line\">    server backend1.example.com;</span><br><span class=\"line\">    server backend2.example.com;</span><br><span class=\"line\">    server backend3.example.com down;</span><br><span class=\"line\">    server backend4.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>least_conn 负载均衡</p>\n<p>  按服务器连接数，新的请求到最少连接数的服务器</p>\n<p>  使用方法：和以上类似，直接添加least_conn;</p>\n</li>\n</ul>\n<h3 id=\"上游服务器缓存\"><a href=\"#上游服务器缓存\" class=\"headerlink\" title=\"上游服务器缓存\"></a>上游服务器缓存</h3><p>proxy_cache_path和proxy_cache。proxy_cache_path配置缓存的存放地址和其他的一些常用配置，proxy_cache指令是为了启动缓存。</p>\n<ul>\n<li><strong>/path/to/cache</strong> 本地路径，用来设置Nginx缓存资源的存放地址</li>\n<li><strong>levels</strong> 默认所有缓存文件都放在同一个/path/to/cache下，但是会影响缓存的性能，因此通常会在/path/to/cache下面建立子目录用来分别存放不同的文件。假设levels=1:2，Nginx为将要缓存的资源生成的key为f4cd0fbc769e94925ec5540b6a4136d0，那么key的最后一位0，以及倒数第2-3位6d作为两级的子目录，也就是该资源最终会被缓存到/path/to/cache/0/6d目录中</li>\n<li><strong>key_zone</strong> 在共享内存中设置一块存储区域来存放缓存的key和metadata（类似使用次数），这样nginx可以快速判断一个request是否命中或者未命中缓存，1m可以存储8000个key，10m可以存储80000个key</li>\n<li><strong>max_size</strong> 最大cache空间，如果不指定，会使用掉所有</li>\n<li><strong>disk space</strong>，当达到配额后，会删除最少使用的cache文件</li>\n<li><strong>inactive</strong> 未被访问文件在缓存中保留时间，本配置中如果60分钟未被访问则不论状态是否为expired，缓存控制程序会删掉文件。inactive默认是10分钟。需要注意的是，inactive和expired配置项的含义是不同的，expired只是缓存过期，但不会被删除，inactive是删除指定时间内未被访问的缓存文件</li>\n<li><strong>use_temp_path</strong> 如果为off，则nginx会将缓存文件直接写入指定的cache文件中，而不是使用temp_path存储，official建议为off，避免文件在不同文件系统中不必要的拷贝</li>\n<li><strong>proxy_cache</strong> 启用proxy cache，并指定key_zone。另外，如果proxy_cache off表示关闭掉缓存。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_cache_path /path/to/cache levels=1:2 keys_zone=mycache:10m max_size=10g inactive=60m use_temp_path=off;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">　　# ...</span><br><span class=\"line\">　　location / &#123;</span><br><span class=\"line\">　　    # 开启并使用缓存</span><br><span class=\"line\">　　　　proxy_cache mycache;</span><br><span class=\"line\">　　    # 针对200和304状态码的缓存设置过期时间</span><br><span class=\"line\">　　    proxy_cache_valid 200 304 8h;</span><br><span class=\"line\">　　    </span><br><span class=\"line\">　　　　proxy_pass http://my_upstream;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用配置SSL证书提供HTTPS访问协议\"><a href=\"#使用配置SSL证书提供HTTPS访问协议\" class=\"headerlink\" title=\"使用配置SSL证书提供HTTPS访问协议\"></a>使用配置SSL证书提供HTTPS访问协议</h3><ol>\n<li>上传证书和密钥</li>\n<li>安装Nginx SSL模块</li>\n<li>修改配置文件 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    </span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        # 监听443端口</span><br><span class=\"line\">        listen 443;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 域名</span><br><span class=\"line\">        server_name huiblog.top;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 开启ssl</span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # ssl证书的pem文件路径</span><br><span class=\"line\">        ssl_certificate  /root/card/huiblog.top.pem;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # ssl证书的key文件路径</span><br><span class=\"line\">        ssl_certificate_key /root/card/huiblog.top.key;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # ssl会话cache?</span><br><span class=\"line\">        ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # ssl会话超时时间?</span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 配置加密协议</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 配置加密套件</span><br><span class=\"line\">        # 加密套件解读：</span><br><span class=\"line\">        #    ECDHE-RSA-AES128-GCM-SHA256 为例</span><br><span class=\"line\">        #    </span><br><span class=\"line\">        #    ECDHE：秘钥交换算法</span><br><span class=\"line\">        #    RSA：签名算法</span><br><span class=\"line\">        #    AES128：对称加密算法</span><br><span class=\"line\">        #    GCM-SHA256：签名算法</span><br><span class=\"line\">        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        </span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass  http://公网地址:项目端口号;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name huiblog.top;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 将请求转成https</span><br><span class=\"line\">        rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"nginx-pid-打开失败及无效的解决办法\"><a href=\"#nginx-pid-打开失败及无效的解决办法\" class=\"headerlink\" title=\"nginx.pid 打开失败及无效的解决办法\"></a>nginx.pid 打开失败及无效的解决办法</h3><pre><code>重新创建nginx.pid路径，重新设置nginx配置文件。\n\n`./nginx -c [filename]`\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}